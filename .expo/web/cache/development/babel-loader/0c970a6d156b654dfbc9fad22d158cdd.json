{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"indicatorHeight\", \"flexibleIndicator\", \"shouldIndicatorHide\", \"hideTimeout\", \"style\", \"scrollViewStyle\", \"scrollIndicatorContainerStyle\", \"scrollIndicatorStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function (_ref) {\n  var children = _ref.children,\n      _ref$indicatorHeight = _ref.indicatorHeight,\n      indicatorHeight = _ref$indicatorHeight === void 0 ? 200 : _ref$indicatorHeight,\n      _ref$flexibleIndicato = _ref.flexibleIndicator,\n      flexibleIndicator = _ref$flexibleIndicato === void 0 ? true : _ref$flexibleIndicato,\n      _ref$shouldIndicatorH = _ref.shouldIndicatorHide,\n      shouldIndicatorHide = _ref$shouldIndicatorH === void 0 ? true : _ref$shouldIndicatorH,\n      _ref$hideTimeout = _ref.hideTimeout,\n      hideTimeout = _ref$hideTimeout === void 0 ? 500 : _ref$hideTimeout,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$scrollViewStyle = _ref.scrollViewStyle,\n      scrollViewStyle = _ref$scrollViewStyle === void 0 ? {} : _ref$scrollViewStyle,\n      _ref$scrollIndicatorC = _ref.scrollIndicatorContainerStyle,\n      scrollIndicatorContainerStyle = _ref$scrollIndicatorC === void 0 ? {} : _ref$scrollIndicatorC,\n      _ref$scrollIndicatorS = _ref.scrollIndicatorStyle,\n      scrollIndicatorStyle = _ref$scrollIndicatorS === void 0 ? {} : _ref$scrollIndicatorS,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(new Animated.Value(shouldIndicatorHide ? 0 : 1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      fadeAnim = _useState2[0];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fromTop = _useState4[0],\n      setFromTop = _useState4[1];\n\n  var _useState5 = useState(indicatorHeight),\n      _useState6 = _slicedToArray(_useState5, 2),\n      indicatorFlexibleHeight = _useState6[0],\n      setIndicatorFlexibleHeight = _useState6[1];\n\n  var _useState7 = useState(1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      visibleScrollPartHeight = _useState8[0],\n      setVisibleScrollPartHeight = _useState8[1];\n\n  var _useState9 = useState(1),\n      _useState10 = _slicedToArray(_useState9, 2),\n      fullSizeContentHeight = _useState10[0],\n      setFullSizeContentHeight = _useState10[1];\n\n  var _useState11 = useState(shouldIndicatorHide),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isIndicatorHidden = _useState12[0],\n      setIsIndicatorHidden = _useState12[1];\n\n  var _useState13 = useState(1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      scrollIndicatorContainerHeight = _useState14[0],\n      setScrollIndicatorContainerHeight = _useState14[1];\n\n  var handleScroll = function handleScroll(_ref2) {\n    var contentOffset = _ref2.contentOffset;\n    var movePercent = contentOffset.y / ((fullSizeContentHeight - visibleScrollPartHeight) / 100);\n    var position = (visibleScrollPartHeight - indicatorFlexibleHeight - (visibleScrollPartHeight - scrollIndicatorContainerHeight)) / 100 * movePercent;\n    setFromTop(position);\n  };\n\n  useEffect(function () {\n    if (shouldIndicatorHide) {\n      isIndicatorHidden ? Animated.timing(fadeAnim, {\n        toValue: 0,\n        duration: hideTimeout\n      }).start() : Animated.timing(fadeAnim, {\n        toValue: 1,\n        duration: hideTimeout\n      }).start();\n    }\n  }, [fadeAnim, hideTimeout, isIndicatorHidden, shouldIndicatorHide]);\n  useEffect(function () {\n    flexibleIndicator && setIndicatorFlexibleHeight(visibleScrollPartHeight * (visibleScrollPartHeight / fullSizeContentHeight));\n  }, [visibleScrollPartHeight, fullSizeContentHeight, flexibleIndicator]);\n\n  var runHideTimer = function runHideTimer() {\n    shouldIndicatorHide && setIsIndicatorHidden(true);\n  };\n\n  var showIndicator = function showIndicator() {\n    shouldIndicatorHide && setIsIndicatorHidden(false);\n  };\n\n  var isContentSmallerThanScrollView = fullSizeContentHeight - visibleScrollPartHeight <= 0;\n  return _jsxs(View, {\n    style: [styles.container, style],\n    children: [_jsx(ScrollView, _objectSpread(_objectSpread({\n      style: [styles.scrollViewContainer, scrollViewStyle],\n      onContentSizeChange: function onContentSizeChange(width, height) {\n        setFullSizeContentHeight(height);\n      },\n      onLayout: function onLayout(e) {\n        return setVisibleScrollPartHeight(e.nativeEvent.layout.height);\n      },\n      onScroll: function onScroll(_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n        return handleScroll(nativeEvent);\n      },\n      scrollEventThrottle: 16,\n      onMomentumScrollEnd: function onMomentumScrollEnd() {\n        return runHideTimer();\n      },\n      onScrollBeginDrag: function onScrollBeginDrag() {\n        return showIndicator();\n      },\n      showsVerticalScrollIndicator: false\n    }, props), {}, {\n      children: children\n    })), !isContentSmallerThanScrollView && _jsx(Animated.View, {\n      style: [styles.scrollIndicatorContainer, {\n        opacity: fadeAnim\n      }, scrollIndicatorContainerStyle],\n      onLayout: function onLayout(e) {\n        return setScrollIndicatorContainerHeight(e.nativeEvent.layout.height);\n      },\n      children: _jsx(View, {\n        style: [styles.scrollIndicator, {\n          top: fromTop,\n          height: indicatorFlexibleHeight\n        }, scrollIndicatorStyle]\n      })\n    })]\n  });\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row'\n  },\n  scrollViewContainer: {\n    flex: 1\n  },\n  scrollIndicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    right: 2,\n    bottom: 0,\n    overflow: 'hidden',\n    borderRadius: 10,\n    width: 6,\n    marginVertical: 3\n  },\n  scrollIndicator: {\n    position: 'absolute',\n    right: 0,\n    width: 6,\n    borderRadius: 3,\n    opacity: 0.5,\n    backgroundColor: 'blue'\n  }\n});","map":{"version":3,"sources":["C:/Users/Naor/Visual Code Files/WorkersManager/node_modules/react-native-scroll-indicator/src/ScrollViewIndicator.js"],"names":["React","useState","useEffect","children","indicatorHeight","flexibleIndicator","shouldIndicatorHide","hideTimeout","style","scrollViewStyle","scrollIndicatorContainerStyle","scrollIndicatorStyle","props","Animated","Value","fadeAnim","fromTop","setFromTop","indicatorFlexibleHeight","setIndicatorFlexibleHeight","visibleScrollPartHeight","setVisibleScrollPartHeight","fullSizeContentHeight","setFullSizeContentHeight","isIndicatorHidden","setIsIndicatorHidden","scrollIndicatorContainerHeight","setScrollIndicatorContainerHeight","handleScroll","contentOffset","movePercent","y","position","timing","toValue","duration","start","runHideTimer","showIndicator","isContentSmallerThanScrollView","styles","container","scrollViewContainer","width","height","e","nativeEvent","layout","scrollIndicatorContainer","opacity","scrollIndicator","top","StyleSheet","create","flex","flexDirection","right","bottom","overflow","borderRadius","marginVertical","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { ScrollView, View, StyleSheet, Animated } from 'react-native';\n\nexport default ({\n    children,\n    indicatorHeight = 200,\n    flexibleIndicator = true,\n    shouldIndicatorHide = true,\n    hideTimeout = 500,\n    style = {},\n    scrollViewStyle = {},\n    scrollIndicatorContainerStyle = {},\n    scrollIndicatorStyle = {},\n    ...props\n}) => {\n    const [fadeAnim] = useState(\n        new Animated.Value(shouldIndicatorHide ? 0 : 1),\n    );\n    const [fromTop, setFromTop] = useState(0);\n    const [indicatorFlexibleHeight, setIndicatorFlexibleHeight] = useState(\n        indicatorHeight,\n    );\n    const [visibleScrollPartHeight, setVisibleScrollPartHeight] = useState(1);\n    const [fullSizeContentHeight, setFullSizeContentHeight] = useState(1);\n    const [isIndicatorHidden, setIsIndicatorHidden] = useState(\n        shouldIndicatorHide,\n    );\n\n    const [\n        scrollIndicatorContainerHeight,\n        setScrollIndicatorContainerHeight,\n    ] = useState(1);\n\n    const handleScroll = ({ contentOffset }) => {\n        //Calculation scroll indicator position based on child height and scrollView view height)\n        const movePercent =\n            contentOffset.y /\n            ((fullSizeContentHeight - visibleScrollPartHeight) / 100);\n        const position =\n            ((visibleScrollPartHeight -\n                indicatorFlexibleHeight -\n                (visibleScrollPartHeight - scrollIndicatorContainerHeight)) /\n                100) *\n            movePercent;\n        setFromTop(position);\n    };\n\n    useEffect(() => {\n        //Hide / show Animation effect\n        if (shouldIndicatorHide) {\n            isIndicatorHidden\n                ? Animated.timing(fadeAnim, {\n                      toValue: 0,\n                      duration: hideTimeout,\n                  }).start()\n                : Animated.timing(fadeAnim, {\n                      toValue: 1,\n                      duration: hideTimeout,\n                  }).start();\n        }\n    }, [fadeAnim, hideTimeout, isIndicatorHidden, shouldIndicatorHide]);\n\n    useEffect(() => {\n        //Change indicator height effect\n        flexibleIndicator &&\n            setIndicatorFlexibleHeight(\n                visibleScrollPartHeight *\n                    (visibleScrollPartHeight / fullSizeContentHeight),\n            );\n    }, [visibleScrollPartHeight, fullSizeContentHeight, flexibleIndicator]);\n\n    const runHideTimer = () => {\n        shouldIndicatorHide && setIsIndicatorHidden(true);\n    };\n\n    const showIndicator = () => {\n        shouldIndicatorHide && setIsIndicatorHidden(false);\n    };\n\n    const isContentSmallerThanScrollView =\n        fullSizeContentHeight - visibleScrollPartHeight <= 0;\n\n    return (\n        <View style={[styles.container, style]}>\n            <ScrollView\n                style={[styles.scrollViewContainer, scrollViewStyle]}\n                onContentSizeChange={(width, height) => {\n                    setFullSizeContentHeight(height);\n                }}\n                onLayout={e =>\n                    setVisibleScrollPartHeight(e.nativeEvent.layout.height)\n                }\n                onScroll={({ nativeEvent }) => handleScroll(nativeEvent)}\n                scrollEventThrottle={16}\n                onMomentumScrollEnd={() => runHideTimer()}\n                onScrollBeginDrag={() => showIndicator()}\n                showsVerticalScrollIndicator={false}\n                {...props}\n            >\n                {children}\n            </ScrollView>\n            {!isContentSmallerThanScrollView && (\n                <Animated.View\n                    style={[\n                        styles.scrollIndicatorContainer,\n                        { opacity: fadeAnim },\n                        scrollIndicatorContainerStyle,\n                    ]}\n                    onLayout={e =>\n                        setScrollIndicatorContainerHeight(\n                            e.nativeEvent.layout.height,\n                        )\n                    }\n                >\n                    <View\n                        style={[\n                            styles.scrollIndicator,\n                            { top: fromTop, height: indicatorFlexibleHeight },\n                            scrollIndicatorStyle,\n                        ]}\n                    />\n                </Animated.View>\n            )}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: 'row',\n    },\n    scrollViewContainer: {\n        flex: 1,\n    },\n    scrollIndicatorContainer: {\n        position: 'absolute',\n        top: 0,\n        right: 2,\n        bottom: 0,\n        overflow: 'hidden',\n        borderRadius: 10,\n        width: 6,\n        marginVertical: 3,\n    },\n    scrollIndicator: {\n        position: 'absolute',\n        right: 0,\n        width: 6,\n        borderRadius: 3,\n        opacity: 0.5,\n        backgroundColor: 'blue',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}